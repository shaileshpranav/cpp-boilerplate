valgrind ./app/shell-app
==3123== Memcheck, a memory error detector
==3123== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3123== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==3123== Command: ./app/shell-app
==3123==
Averaged sensor reading: 10
==3123== Conditional jump or move depends on uninitialised value(s)
==3123==    at 0x10A31B: main (main.cpp:9)
==3123==
==3123==
==3123== HEAP SUMMARY:
==3123==     in use at exit: 44 bytes in 2 blocks
==3123==   total heap usage: 4 allocs, 2 frees, 73,772 bytes allocated
==3123==
==3123== LEAK SUMMARY:
==3123==    definitely lost: 24 bytes in 1 blocks
==3123==    indirectly lost: 20 bytes in 1 blocks
==3123==      possibly lost: 0 bytes in 0 blocks
==3123==    still reachable: 0 bytes in 0 blocks
==3123==         suppressed: 0 bytes in 0 blocks
==3123== Rerun with --leak-check=full to see details of leaked memory
==3123==
==3123== Use --track-origins=yes to see where uninitialised values come from
==3123== For lists of detected and suppressed errors, rerun with: -s
==3123== ERROR SUMMARY: 1 errors from 1 contexts (suppressed:0 from 0)


valgrind --leak-check=full ./app/shell-app
==3364== Memcheck, a memory error detector
==3364== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3364== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==3364== Command: ./app/shell-app
==3364==
Averaged sensor reading: 10
==3364== Conditional jump or move depends on uninitialised value(s)
==3364==    at 0x10A31B: main (main.cpp:9)
==3364==
==3364==
==3364== HEAP SUMMARY:
==3364==     in use at exit: 44 bytes in 2 blocks
==3364==   total heap usage: 4 allocs, 2 frees, 73,772 bytes allocated
==3364==
==3364== 44 (24 direct, 20 indirect) bytes in 1 blocks are definitely lost in loss record 2 of 2
==3364==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==3364==    by 0x10A46E: AnalogSensor::Read() (AnalogSensor.cpp:16)
==3364==    by 0x10A2F7: main (main.cpp:7)
==3364==
==3364== LEAK SUMMARY:
==3364==    definitely lost: 24 bytes in 1 blocks
==3364==    indirectly lost: 20 bytes in 1 blocks
==3364==      possibly lost: 0 bytes in 0 blocks
==3364==    still reachable: 0 bytes in 0 blocks
==3364==         suppressed: 0 bytes in 0 blocks
==3364==
==3364== Use --track-origins=yes to see where uninitialised values come from
==3364== For lists of detected and suppressed errors, rerun with: -s
==3364== ERROR SUMMARY: 2 errors from 2 contexts (suppressed:0 from 0)